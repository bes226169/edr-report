//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//
//     變更此檔案可能會導致不正確的行為，而且若已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ws
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://bpm03.bes.com.tw/", ConfigurationName="ws.besUtilityWSSoap")]
    public interface besUtilityWSSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://bpm03.bes.com.tw/CallSmallBell", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CallSmallBellAsync(string UserEmpno, object JsonStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://bpm03.bes.com.tw/CallFm7Start", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> CallFm7StartAsync(string FlowFlag, string JsonStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://bpm03.bes.com.tw/SendEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> SendEmailAsync(string vP_FROM_NAME, string[] vP_TO, string[] vP_CC, string vMAIL_SUBJECT, string vContent, string[] pathNames, byte[][] attachFiles);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface besUtilityWSSoapChannel : ws.besUtilityWSSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class besUtilityWSSoapClient : System.ServiceModel.ClientBase<ws.besUtilityWSSoap>, ws.besUtilityWSSoap
    {
        
        /// <summary>
        /// 實作此部分方法來設定服務端點。
        /// </summary>
        /// <param name="serviceEndpoint">要設定的端點</param>
        /// <param name="clientCredentials">用戶端認證</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public besUtilityWSSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(besUtilityWSSoapClient.GetBindingForEndpoint(endpointConfiguration), besUtilityWSSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public besUtilityWSSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(besUtilityWSSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public besUtilityWSSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(besUtilityWSSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public besUtilityWSSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> CallSmallBellAsync(string UserEmpno, object JsonStr)
        {
            return base.Channel.CallSmallBellAsync(UserEmpno, JsonStr);
        }
        
        public System.Threading.Tasks.Task<string[]> CallFm7StartAsync(string FlowFlag, string JsonStr)
        {
            return base.Channel.CallFm7StartAsync(FlowFlag, JsonStr);
        }
        
        public System.Threading.Tasks.Task<string[]> SendEmailAsync(string vP_FROM_NAME, string[] vP_TO, string[] vP_CC, string vMAIL_SUBJECT, string vContent, string[] pathNames, byte[][] attachFiles)
        {
            return base.Channel.SendEmailAsync(vP_FROM_NAME, vP_TO, vP_CC, vMAIL_SUBJECT, vContent, pathNames, attachFiles);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.besUtilityWSSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.besUtilityWSSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.besUtilityWSSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://besapi.bes.com.tw:8060/besUtilityWS.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.besUtilityWSSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://besapi.bes.com.tw:8060/besUtilityWS.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            besUtilityWSSoap,
            
            besUtilityWSSoap12,
        }
    }
}
